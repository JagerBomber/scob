program WaterfallFisher;

{$DEFINE SMART}
{$I SRL-6/SRL.simba}
{$i srl-6/lib/misc/srlplayerform.simba}

const
  initialExp= 1;
  HAND_HUE = 0.7;
  HAND_SAT = 2.0;
  playerModBMP := BitmapFromString (11, 6, 'meJy7e+XK/GnTcKHJXV13CSkQFeSAqGFkYAAiZAZQVlVeUJSfHa4AjQQq4Odi4uNkxKNAiJdNiIcZyMCF5KQEABnjWTQ=');
  jagexModBMP := BitmapFromString (10, 7, 'meJzj+/9RY9lJZSmerv8/+f5/hCCgiIIYJ1AEWRAT4ZeVFmKBKGBkYAAiZAayjXApOAmURdaLKQvUCyRxIQCH7WsV');

Type TSpotLevel = record
  Searchbox: tBox;
  FishingPoint: tPoint;
end;

Type TRod = record
  RodColor, RodTol: integer;
end;

var
  failTimer, progressTimer: TTimeMarker;
  Lvl, R, B, A: integer;
  idleTime: tCountDown;


function __getMouseOverTextTess(const box: TBox): string; override;
begin
  result := Tesseract_GetText(box.x1, box.y1, box.x2, box.y2, TTesseractFilter([4, 4, [true, 25, TM_Mean]]));
end;

function Before(s, str: string): string;    //Credits to Janilabo
var
  p: Integer;
begin
  if (Length(s) < Length(str)) then
  begin
    p := Pos(s, str);
    if (p > 1) then
      Result := Copy(str, 1, (p - 1))
    else
      Result := '';
  end else
    Result := '';
end;

function After(s, str: string): string;     //Credits to Janilabo
var
  p, strL, sL: Integer;
begin
  sL := Length(s);
  strL := Length(str);
  if (sL < strL) then
  begin
    p := Pos(s, str);
    if (p > 0) then
      Result := Copy(str, (p + sL), ((1 + strL) - (p + sL)));
  end else
    Result := '';
end;

procedure initPlayerForm();
begin
  with playerForm do
  begin
    name := 'Priffi Waterfall Fisher by Scob';
    scriptHelpThread := 'https://villavu.com/forum/showthread.php?t=116008';

    editBoxLabels := ['Select world', 'Min break time', 'Max break time', 'Break frequency'];
    editBoxDefaults := ['0', '0', '0', '15'];

    editBoxHints := ['Select world', 'in minutes', 'in minutes','from 2 to 100, 2 is 0,06% random chance, 100 is 3,3% every loop'];

    checkBoxLabels := ['Invention support', 'Look for J/P MOD', 'ChatBox antiban search'];
    checkBoxDefaults := ['True', 'False', 'False'];
    checkBoxHints := ['Dissasembles rod at lvl 10', 'Changes world when J/P MOD appears', 'Changes world when bot/macro/auto found in chatbox' ];

    comboBoxLabels := ['Select spot', 'Select rod'];
    comboBoxDefaults := ['Spot 97', 'Rod o-matic'];
    comboBoxHints := ['Select spot, 97 and 95 stand on south, 93 on east'];

    setLength(comboBoxItems, length(comboBoxLabels));

    comboBoxItems[0] := ['Spot 93', 'Spot 95', 'Spot 97'];
    comboBoxItems[1] := ['Rod o-matic', 'Crystal rod', 'Standard rod'];

  end;
end;

procedure debugSPFSettings();
var
  i: integer;
begin
  for i := 0 to high(players) do
  begin
    writeln('');
    writeln('World select:          ', players[i].integers[0]);
    writeln('Min:                   ', players[i].integers[1]);
    writeln('Max:                   ', players[i].integers[2]);
    writeln('Break frequency:       ', players[i].integers[3]);
    writeln('Spot level:            ', players[i].strings[0]);
    writeln('Rod:                   ', players[i].strings[1]);
    writeln('Inv support:           ', players[i].booleans[0]);
    writeln('ChatBox antiban:       ', players[i].booleans[1]);
    writeln('Look for p/j mod:      ', players[i].booleans[2]);
    writeln('');
  end;
end;

procedure declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.players);
  currentPlayer := 0;

  for i := 0 to high(players) do
    with players[i] do
    begin
      integers[0] := strToInt(playerForm.players[i].settings[0]);
      integers[1] := strToInt(playerForm.players[i].settings[1]);
      integers[2] := strToInt(playerForm.players[i].settings[2]);
      integers[3] := strToInt(playerForm.players[i].settings[3]);

      booleans[0] := strToBool(playerForm.players[i].settings[4]);
      booleans[1] := strToBool(playerForm.players[i].settings[5]);
      booleans[2] := strToBool(playerForm.players[i].settings[6]);

      strings[0] := playerForm.players[i].settings[7];
      strings[1] := playerForm.players[i].settings[8];

      world := integers[0];
    end;
end;

var
  Rod: TRod;
  Spot: TSpotLevel;

procedure LoadRod();
begin
  case players[currentPlayer].strings[1] of
    'Rod o-matic':  begin
                      Rod.RodColor := 6710900;
                      Rod.RodTol := 4;
                    end;

    'Crystal rod':  begin

                      if players[currentPlayer].strings[0]= 'Spot 97' then
                      begin
                        Spot.Searchbox := inttoBox(240, 174, 256, 189);
                        Rod.RodColor := 15653639;
                        Rod.RodTol := 4;
                      end;

                      if players[currentPlayer].strings[0]= 'Spot 95' then
                      begin
                        Spot.Searchbox := inttoBox(245, 180, 263, 184);
                        Rod.RodColor := 16776727;
                        Rod.RodTol := 5;
                      end;

                      if players[currentPlayer].strings[0]= 'Spot 93' then
                      begin
                        Spot.Searchbox := inttoBox(284, 130, 295, 150);
                        Rod.RodColor := 14934170;
                        Rod.RodTol := 5;
                      end;
                    end;

    'Standard rod': begin

                      if players[currentPlayer].strings[0]= 'Spot 97' then
                      begin
                        Spot.Searchbox := inttoBox(240, 174, 256, 189);
                        Rod.RodColor := 141637;
                        Rod.RodTol := 5;
                      end;

                      if players[currentPlayer].strings[0]= 'Spot 95' then
                      begin
                        Spot.Searchbox := inttoBox(245, 180, 263, 184);
                        Rod.RodColor := 141637;
                        Rod.RodTol := 5;
                      end;

                      if players[currentPlayer].strings[0]= 'Spot 93' then
                      begin
                        Spot.Searchbox := inttoBox(284, 130, 295, 150);
                        Rod.RodColor := 141637;
                        Rod.RodTol := 5;
                      end;
                    end;
  end;
end;

procedure LoadSpot();
begin
  case players[currentPlayer].strings[0] of
    'Spot 93':   begin
                  Spot.Searchbox := inttoBox(288, 170, 297, 178);
                  Spot.FishingPoint := Point(292, 179);
                 end;

    'Spot 95':   begin
                  spot.Searchbox := inttoBox(263, 181, 273, 192);
                  spot.FishingPoint := Point(267, 226);
                 end;

    'Spot 97':   begin
                  spot.Searchbox := inttoBox(266, 184, 279, 193);
                  spot.FishingPoint := Point(265, 220);
                 end;
  end;
end;

var
 rodDTM, invDTM, rodEQDTM: integer;

procedure LoadTheDTM;
begin
  rodDTM := DTMFromString('mggAAAHicY2NgYJBlZ2DQAWIBIJYBYjEgVgRiPWYGBgUgNgdiDSC2AmIDIP67TRmoiwkDSzJgB4w4MAQAAGU9BAU=');
  invDTM := DTMFromString('m6wAAAHic42YAAlYGhn8sDAzsQJoViH8B2T+A+DcQs7BC5JmB+A+QX8DEwJABxPlAnA3FRUBcCsW1QFwBxJVA/ObRcgYuAREGET0rBnUrRzAW1DZnkNY2YJABYkFJGQZ+JW0GXgUNBn4G4gEjCRgJAADwmxEJ');
  rodEQDTM := DTMFromString('mggAAAHicY2NgYAhnY2BIAWIPIA4B4gggDgTiDCYGhmggLgLiZCDOhbJnVDkBdTFhYEkG7IARB4YAAFFyBis=');
 end;

procedure FrDTM;
begin
  FreeDTM(rodDTM);
  FreeDTM(invDTM);
  FreeDTM(rodEQDTM);
end;

procedure LoginPlayer;
begin
  players[currentPlayer].login();
  failTimer.start();
  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  exitTreasure();
end;

function isFishing(): boolean;
var
  TPA: tPointArray;
begin
  result := findColorsTolerance(TPA, Rod.RodColor, spot.Searchbox, Rod.RodTol, colorSetting(2, HAND_HUE, HAND_SAT));
end;

procedure Dissasemble;
var
  x, y, p, l, c, d: integer;
begin
  gameTabs.openTab(TAB_BACKPACK);
  begin
    if findDTM(rodDTM, x, y, tabBackPack.getBounds()) then
    begin
      mouse(x, y, 3, 3, MOUSE_LEFT);
      wait(random(1000, 2000));

      if isMouseOverText(['10'], 100, true) then
      begin
        holdMouse(x + random(-3, 3), y + random(-3, 3), MOUSE_LEFT);
        wait(random(200));

        if findDTM(invDTM, p, l, tabBackPack.getBounds()) then
        begin
          mouseSpeed := random(15, 30);
          mouse(p + random(-3, 3), l + random(-3, 3),MOUSE_MOVE);
          wait(random(200));

          releaseMouse(p, l, MOUSE_LEFT);
          wait(random(1000, 3000));

          typeSend('1', false);
          writeln('Rod succesfully dissasembled');

          inc(R);
          Lvl := 1;
          wait(random(2000, 4000));

        end else
          begin
            releaseMouse(x, y, MOUSE_LEFT);
            Mouse(x, y, MOUSE_LEFT);
            writeln('We didnt find invDTM');
          end;
        end else
        writeln('Something went wrong, cant find rod to dissasemble');
      end else
      writeln('We do not have any other rods in backpack');
  end;
end;

procedure CheckRod();      //credits to TSN for idea
var
  x, y, i: Integer;
  s, o, n, j: String;
begin
  if not isLoggedIn() then LoginPlayer;

  gameTabs.openTab(TAB_EQUIPMENT);
  if gameTabs.openTab(TAB_EQUIPMENT) then
  begin
    writeLn('Tab Equipment is opened');

    if findDTM(rodEQDTM, x, y, tabBackPack.getbounds()) then
    begin
      mouse(point(x, y).randRange(4, 8, -8, 8), MOUSE_MOVE);
      wait(random(500, 1500));

      s := getMouseOverText(True);
      writeln(s);
      o := After(': ', s);
      writeln(o);
      n := Before(#13#10 + 'Item', o);
      writeln(n);

      for i := 1 to 12 do

        if strToIntDef(n, 1) = i then
        begin
          Lvl := i;
          writeLn('Our rod O-matic is lvl ',i);
        end;
        if Lvl = 10 then Dissasemble();
    end else
      writeln('Looks like we didnt find rodEQDTM?');
  end;
  if not gameTabs.openTab(TAB_BACKPACK) then
  gameTabs.openTab(TAB_BACKPACK);

  mouseOffClient(OFF_CLIENT_RANDOM);
end;

procedure TakeABreak;
var
  TimeLeft, breakFor, H, M, S: integer;
  breakDuration: TTimeMarker;
begin
  breakDuration.start();

  breakFor := RandomRange((players[currentPlayer].integers[1]), (players[currentPlayer].integers[2])) * 60000;
  convertTime(breakFor, H, M, S);

  writeLn('Taking a Break for: ' + toStr(H)+ 'h ' + toStr(M)+ 'm ' + toStr(S)+ 's');
  repeat
    timeLeft := breakFor - breakDuration.getTime();

    convertTime(timeLeft, H, M, S);

    writeLn('Resuming in: ' + toStr(H)+ 'h ' + toStr(M)+ 'm ' + toStr(S)+ 's');
    wait(10000 + random(2000));
  until breakFor < breakDuration.getTime();
end;

var
  AB: TTimeMarker;
  NextAB: Integer;

procedure antiban;
var
  I, ABMin, ETA, h, m, s: Integer;
begin
  if ((AB.time = -1) or (AB.getTime > NextAB)) then
  begin
    I := Random(3000);                                 //EDIT THIS NUMBER TO SET ANTIBAN FREQUENCY
    Case I Of                                          //LESS = MORE FREQUENT
      1..players[currentPlayer].integers[3]:
        begin
          if progressTimer.getTime() > 1800000 then   //First break can be activated after 30 minutes of gameplay
          begin
            inc(B);
            failTimer.pause();
            writeLn('Random break activated');
            TakeABreak;
            failTimer.start();
            CheckRod;
          end;
        end;
      101..200:
        begin
          inc(A);
          MouseOffClient(Random(4));
          Wait(GaussRangeInt(100, 2000));
        end;
      201..220:
        begin
          inc(A);                                    //checking voices
          mouse(44, 53, 11, 10, MOUSE_MOVE);
          Wait(random(4000, 5500));
          mouse(121, 52, 10, 10, MOUSE_MOVE);
          Wait(random(3000, 8000));
          mouseOffClient(OFF_CLIENT_RANDOM);
        end;
      202..232:
        begin
          inc(A);                                    //checking fishing exp
          hoverSkill(SKILL_FISHING);
          Wait(Random(7000, 12000));
          TabBackpack.Open;
        end;
      261..320:
        begin
          inc(A);
          mouseMovingObject;
        end;
      391..451:
        begin
          inc(A);
          SleepAndMoveMouse(GaussRangeInt(100,1500));
        end;
      452..475:
        begin
          if players[currentPlayer].booleans[0] then
          begin
            CheckRod;
          end;                                      //checking Rod O-matic
        end;
    end;
    AB.reset; AB.start;
    NextAB := AB.getTime + 6000 + gaussRangeInt(2000, 6000);
  end;
  minimap.setAngle(MM_DIRECTION_NORTH);
  ETA := NextAB - AB.getTime;
End;

procedure ClickSpot;
begin
  mouse(point(spot.FishingPoint.X + random(-5, 5), spot.FishingPoint.Y + random(-5, 5)), MOUSE_RIGHT, MOUSE_HUMAN);
  mouseSpeed := random(15, 35);
  wait(random(200, 800));

 if chooseOption.select(['Lure']) then
 begin
  writeLn('Succesfully clicked fishing spot');
  MouseOffClient(Random(4));
  idleTime.setTime(random(170000, 220000));
 end;
end;

procedure CheckIfFishing;
begin
if (not isFishing()) or idleTime.isFinished() then
  begin
    ClickSpot;
  end else failTimer.start();
end;

procedure findMod(); //Credits for Justin for this procedure :)
var
  x, y: integer;
begin
  if (findBitmapToleranceIn(playerModBMP, x, y, IntToBox(1, 508, 604, 590), 50)) or (findBitmapToleranceIn(jagexModBMP, x, y, IntToBox(1, 508, 604, 590), 50)) then
  begin
    writeln('Jagex/Player mod found, hopping');
    takeScreenshot(ToStr(random(10000)) + '_mod.png');
    players[currentPlayer].exitToLobby();

    lobbyWorlds.selectRandomWorld(true);
    players[currentPlayer].login();
    sleep(randomRange(2458, 5497));

    failTimer.start();
    minimap.clickCompass();
    mainScreen.setAngle(MS_ANGLE_HIGH);
    exitTreasure();
  end;
end;

procedure botChatSearch(); //procedure adopted from Justin's Seren stones
begin
  if (chatbox.findText(['otting', 'bot', 'Bot', 'acro', 'auto', 'Auto'])) then
  begin
    writeln('Banned chat found... Hopping');
    takeScreenshot(ToStr(random(10000)) + '_chat.png');
    players[currentPlayer].exitToLobby();

    lobbyWorlds.selectRandomWorld(true);
    players[currentPlayer].login();
    sleep(randomRange(2458, 5497));

    failTimer.start();
    minimap.clickCompass();
    mainScreen.setAngle(MS_ANGLE_HIGH);
    exitTreasure();
  end;
end;

procedure ChatBoxSearch();
var
  i: Integer;
  st, subString: String;
begin

  for i := 0 to 1 do // Reads the bottom 2 chatbox lines only
  begin
    st := chatBox.getTextOnLine(i, TESS_FILTER_CHATBOX);

    if pos('Your Fishing rod', st) > 0 then
    begin
      subString := After('is now level ', st);

      if (strToInt(subString)= 10) and (Lvl< 8) then
      begin
       Lvl := 1;
       exit;
      end;

        Lvl := strToInt(subString);

      if lvl = 10 then checkRod;
    end;
  end;
end;

procedure Report(); //Credits to Kasi for the idea with arrays :)
var
    xp, xphr, h, m, s, h1, m1, s1: Integer;
    tsa, tsa1: TStringArray;
begin
    smartImage.clearArea([10, 215, 210, 360]);
    smartImage.clearArea([590, 60, 770, 180]);

    //xp := chatbox.getXPBar - players[0].integers[4];
    //xphr := Round(xp * 1000.0 * (3600.0 / (progressTimer.getTime() + 1)));

    ConvertTime(progressTimer.getTime(), h, m, s);
    ConvertTime(failTimer.getTime(), h1, m1, s1);

    tsa := [
        'Priffi Waterfall Fisher by Scob',
        'Working: ' + ToString(h) + ' H, ' + ToString(m) + ' M, ' + ToString(s) + ' S',
        'XP: ' + 'currently unavailable'{+ ToString(xp),},
        'XP/H: ' + 'currently unavailable'{+ ToString(xphr),},
        'Breaks: ' + ToString(b),
        'Antiban: ' + ToString(a),
        'FailTimer: ' + ToString(m1) + ' M ' + ToString(s1) + ' S '
    ];

    tsa1 := [
        'Rod O-matic level: ' + ToString(lvl),
        'Rods dissasembled: ' + ToString(r),
        'Invention XP gained: ' + ToString(r * 459) + ' K'
    ];

    smartImage.drawTextLines(tsa, Point(10, 215), statChars, False, clWhite);

    if players[currentPlayer].booleans[0] then begin
        smartImage.drawTextLines(tsa1, Point(590, 60), statChars, False, clYellow);
    end;
end;

procedure MainLoop;
begin
  if not isLoggedIn() then
  begin
    LoginPlayer;
  end;
    CheckIfFishing;

    if players[currentPlayer].booleans[0] then
    begin
      ChatBoxSearch();
      wait(random(1000, 1400));        //makes script faster or slower
    end else wait(random(1000, 1500)); //as above but if doesnt support inv

    if players[currentPlayer].booleans[1] then findMod();

    if players[currentPlayer].booleans[2] then botChatSearch();

    Report;
    antiban;

    if (failTimer.getTime() > 150000) then
    begin
      writeln('Nothing happened in 2,5 minutes, terminating...');
      terminateScript();
    end;
end;

begin
  clearDebug();
  initPlayerForm();
  runPlayerForm();
  if (not playerForm.isScriptReady) then exit;

  smartEnableDrawing := True;
  disableSRLDebug := False;
  setupSRL;
  LoadTheDTM;
  AddOnTerminate('FrDTM');

  declarePlayers();
  LoadSpot();
  LoadRod();
  LoginPlayer;
  debugSPFSettings();
  players[currentPlayer].integers[4] := chatbox.getXPBar;
  idleTime.setTime(random(170000, 220000));
  progressTimer.start();
  //mainScreen.setZoom(true, random(49, 66)); //auto zoom-out

  if players[currentPlayer].booleans[0] then
    CheckRod;
  repeat
    MainLoop();
  until false;
  FrDTM;
end.
